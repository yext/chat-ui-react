{"version":3,"file":"useComposedCssClasses.js","sources":["../../../../src/hooks/useComposedCssClasses.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * useComposedCssClasses merges a component's built-in tailwind classes with custom tailwind classes.\n *\n * @remarks\n * Tailwind classes will be merged without conflict, with custom classes having higher priority\n * than built-in ones.\n *\n * @example\n * Suppose a component has built-in classes of `{ container: 'px-4 text-slate-700' }`.\n *\n * Passing in the custom classes:\n *\n * ```ts\n * { container: 'text-red-200 mb-3' }\n * ```\n *\n * results in the merged classes of:\n *\n * ```ts\n * { container: 'px-4 text-red-200 mb-3' }\n * ```\n *\n * @public\n *\n * @param builtInClasses - The component's built-in tailwind classes\n * @param customClasses - The custom tailwind classes to merge with the built-in ones\n * @returns The composed CSS classes\n */\nexport function useComposedCssClasses<\n  ClassInterface extends Partial<Record<keyof ClassInterface, string | object>>\n>(\n  builtInClasses: Readonly<ClassInterface>,\n  customClasses?: Partial<ClassInterface>\n): ClassInterface {\n  return useMemo(() => {\n    const mergeCssClasses = (\n      builtInClasses: Readonly<ClassInterface>,\n      customClasses?: Partial<ClassInterface>\n    ) => {\n      const mergedCssClasses = { ...builtInClasses };\n      if (!customClasses) {\n        return mergedCssClasses;\n      }\n      Object.keys(customClasses).forEach((key) => {\n        const builtIn = builtInClasses[key];\n        const custom = customClasses[key];\n        if (!builtIn || !custom) {\n          mergedCssClasses[key] = custom || builtIn;\n        } else if (typeof builtIn === \"object\" && typeof custom === \"object\") {\n          mergedCssClasses[key] = mergeCssClasses(builtIn, custom);\n        } else if (typeof builtIn === \"string\" && typeof custom === \"string\") {\n          mergedCssClasses[key] = twMerge(builtIn, custom);\n        }\n      });\n      return mergedCssClasses;\n    };\n    return mergeCssClasses(builtInClasses, customClasses);\n  }, [builtInClasses, customClasses]);\n}\n"],"names":["useMemo","twMerge"],"mappings":";;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;AACa,SAAA,qBAAqB,CAGnC,cAAwC,EACxC,aAAuC,EAAA;IAEvC,OAAOA,aAAO,CAAC,MAAK;AAClB,QAAA,MAAM,eAAe,GAAG,CACtB,cAAwC,EACxC,aAAuC,KACrC;AACF,YAAA,MAAM,gBAAgB,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;YAC/C,IAAI,CAAC,aAAa,EAAE;AAClB,gBAAA,OAAO,gBAAgB,CAAC;AACzB,aAAA;YACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AACzC,gBAAA,MAAM,OAAO,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;AACpC,gBAAA,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;AAClC,gBAAA,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,EAAE;AACvB,oBAAA,gBAAgB,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,OAAO,CAAC;AAC3C,iBAAA;qBAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBACpE,gBAAgB,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC1D,iBAAA;qBAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBACpE,gBAAgB,CAAC,GAAG,CAAC,GAAGC,qBAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAClD,iBAAA;AACH,aAAC,CAAC,CAAC;AACH,YAAA,OAAO,gBAAgB,CAAC;AAC1B,SAAC,CAAC;AACF,QAAA,OAAO,eAAe,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;AACxD,KAAC,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC,CAAC;AACtC;;;;"}