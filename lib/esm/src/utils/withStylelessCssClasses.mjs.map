{"version":3,"file":"withStylelessCssClasses.mjs","sources":["../../../../src/utils/withStylelessCssClasses.ts"],"sourcesContent":["/**\n * Append styleless css classnames that user can target to add custom styling to components.\n * The classes follows a format of \"yext-chat-component-name__css-interface-field-name\".\n *\n * @example\n * the styleless css class name for {@link MessageBubble}'s \"message__bot\" field defined\n * in its {@link MessageBubbleCssClasses} interface is \"yext-chat-message-bubble__message__bot\"\n *\n * @internal\n *\n * @param componentName - the component name\n * @param builtInClasses - built in css classnames of the component\n *\n * @returns builtInClasses with styleless css classnames\n */\nexport function withStylelessCssClasses<\n  ClassInterface extends Partial<Record<keyof ClassInterface, string | object>>\n>(\n  componentName: string,\n  builtInClasses: Readonly<Required<ClassInterface>>\n): ClassInterface {\n  const formatString = (str: string) =>\n    str.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n  const classes = { ...builtInClasses };\n  Object.keys(builtInClasses).forEach((key) => {\n    if (typeof classes[key] === \"string\") {\n      classes[key] = `${classes[key]} yext-chat${formatString(\n        componentName\n      )}__${formatString(key)}`;\n    }\n  });\n  return classes;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AACa,SAAA,uBAAuB,CAGrC,aAAqB,EACrB,cAAkD,EAAA;IAElD,MAAM,YAAY,GAAG,CAAC,GAAW,KAC/B,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,KAAK,CAAA,CAAA,EAAI,KAAK,CAAC,WAAW,EAAE,CAAE,CAAA,CAAC,CAAC;AAC9D,IAAA,MAAM,OAAO,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;IACtC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AAC1C,QAAA,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAA,UAAA,EAAa,YAAY,CACrD,aAAa,CACd,CAAK,EAAA,EAAA,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;AAC3B,SAAA;AACH,KAAC,CAAC,CAAC;AACH,IAAA,OAAO,OAAO,CAAC;AACjB;;;;"}